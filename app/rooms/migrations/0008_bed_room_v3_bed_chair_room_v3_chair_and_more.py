# Generated by Django 4.1.7 on 2023-03-15 20:13

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rooms', '0007_roomwithrelatedobjsv3'),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name='bed',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_bed', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, beds)\n            WITH room_ids AS (\n                SELECT\n                rooms_bed_rooms.room_id\n                FROM rooms_bed\n                LEFT JOIN rooms_bed_rooms ON rooms_bed_rooms.bed_id = rooms_bed.id\n                WHERE rooms_bed.id = OLD.id\n            )\n            SELECT\n                room.id id,\n                jsonb_agg(bed) beds\n            FROM  rooms_room room\n            LEFT JOIN rooms_bed_rooms bed_i ON room.id = bed_i.room_id\n            LEFT JOIN rooms_bed bed ON bed.id = bed_i.bed_id\n            WHERE room.id IN (SELECT room_id FROM room_ids)\n            GROUP BY room.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET beds = EXCLUDED.beds;\n            RETURN NULL;\n    ', hash='cd313a2ea26c7d3a2dbc561734353d866598a81e', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_bed_512d8', table='rooms_bed', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='chair',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_chair', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, chairs)\n            WITH room_ids AS (\n                SELECT\n                rooms_chair_rooms.room_id\n                FROM rooms_chair\n                LEFT JOIN rooms_chair_rooms ON rooms_chair_rooms.chair_id = rooms_chair.id\n                WHERE rooms_chair.id = OLD.id\n            )\n            SELECT\n                room.id id,\n                jsonb_agg(chair) chairs\n            FROM  rooms_room room\n            LEFT JOIN rooms_chair_rooms chair_i ON room.id = chair_i.room_id\n            LEFT JOIN rooms_chair chair ON chair.id = chair_i.chair_id\n            WHERE room.id IN (SELECT room_id FROM room_ids)\n            GROUP BY room.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET chairs = EXCLUDED.chairs;\n            RETURN NULL;\n    ', hash='0bf996580913420f4c519f483f8df125030cc9f6', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_chair_dee7b', table='rooms_chair', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='decoration',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_decoration', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, decoration)\n            SELECT\n                room.id id,\n                jsonb_build_object(\n                'id',\n                decoration.id,\n                'name',\n                decoration.name,\n                'souvenirs',\n                jsonb_agg(souvenir)\n                ) decoration\n            FROM\n                rooms_room room\n                LEFT JOIN rooms_decoration decoration ON room.decoration_id = decoration.id\n                LEFT JOIN rooms_decoration_souvenirs ds ON decoration.id = ds.decoration_id\n                LEFT JOIN rooms_souvenir souvenir ON ds.souvenir_id = souvenir.id\n            WHERE room.decoration_id = OLD.id\n            GROUP BY\n                room.id,\n                decoration.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET decoration = EXCLUDED.decoration;\n            RETURN NULL;\n    ", hash='3afde91a63247eb8681b0df94ef3fcbc9c6dffd3', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_decoration_91dce', table='rooms_decoration', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='door',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_door', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, door)\n            SELECT\n                room.id id,\n                jsonb_build_object(\n                'id', door.id, 'name', door.name, 'width',\n                door.width, 'length', door.length,\n                'height', door.height, 'type', door.type\n                ) door\n            FROM\n                rooms_room room\n                LEFT JOIN rooms_door door ON room.door_id = door.id\n            WHERE room.door_id = OLD.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET door = EXCLUDED.door;\n            RETURN NULL;\n    ", hash='f2ebd3f8f713c60f222a1a7952448c26fc58a787', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_door_02aea', table='rooms_door', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='room',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_common_info', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, name, width, length, height, type)\n            SELECT\n                room.id id,\n                room.name name,\n                room.width width,\n                room.length length,\n                room.height height,\n                room.type type\n            FROM\n                rooms_room room\n            WHERE room.id = OLD.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET name = EXCLUDED.name,\n            width = EXCLUDED.width,\n            length = EXCLUDED.length,\n            height = EXCLUDED.height,\n            type = EXCLUDED.type;\n            RETURN NULL;\n    ', hash='ca9775a820068d71d5de790ffadc209c8df6e04b', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_common_info_29562', table='rooms_room', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='souvenir',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_souvenir', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, decoration)\n            WITH decoraition_ids AS(\n                SELECT decoration_id from rooms_decoration_souvenirs where souvenir_id=OLD.id\n                )\n            SELECT\n                room.id id,\n                jsonb_build_object(\n                'id',\n                decoration.id,\n                'name',\n                decoration.name,\n                'souvenirs',\n                jsonb_agg(souvenir)\n                ) decoration\n            FROM\n                rooms_room room\n                LEFT JOIN rooms_decoration decoration ON room.decoration_id = decoration.id\n                LEFT JOIN rooms_decoration_souvenirs ds ON decoration.id = ds.decoration_id\n                LEFT JOIN rooms_souvenir souvenir ON ds.souvenir_id = souvenir.id\n            WHERE room.decoration_id IN (SELECT decoration_id from decoraition_ids)\n            GROUP BY\n                room.id,\n                decoration.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET decoration = EXCLUDED.decoration;\n            RETURN NULL;\n    ", hash='1f3f69bf4c3c6fb79d6e8455e558316ef773f834', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_souvenir_24f94', table='rooms_souvenir', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='table',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_table', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, tables)\n            WITH room_ids AS (\n                SELECT\n                rooms_table_rooms.room_id\n                FROM rooms_table\n                LEFT JOIN rooms_table_rooms ON rooms_table_rooms.table_id = rooms_table.id\n                WHERE rooms_table.id = OLD.id\n            )\n            SELECT\n                room.id id,\n                jsonb_agg(table_model) tables\n            FROM  rooms_room room\n            LEFT JOIN rooms_table_rooms table_i ON room.id = table_i.room_id\n            LEFT JOIN rooms_table table_model ON table_model.id = table_i.table_id\n            WHERE room.id IN (SELECT room_id FROM room_ids)\n            GROUP BY room.id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET tables = EXCLUDED.tables;\n            RETURN NULL;\n    ', hash='7c51283ee83795ac747d920288cd3e93288cc192', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_table_ece0f', table='rooms_table', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='window',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_windows', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, windows)\n            WITH room_window_fittings AS (\n                SELECT\n                room_id,\n            json_build_object(\n            'id',\n            win.id,\n            'name',\n            win.name,\n            'width',\n            win.width,\n            'length',\n            win.length,\n            'height',\n            win.height,\n            'type',\n            win.type,\n            'fittings',\n            jsonb_agg(wf)\n            ) window_in_room\n            FROM rooms_window win\n            LEFT JOIN rooms_windowfittings_windows rwfw ON rwfw.window_id = win.id\n            LEFT JOIN rooms_windowfittings wf ON wf.id = rwfw.windowfittings_id\n            WHERE win.id = OLD.id\n            GROUP BY room_id, win.id\n            )\n            SELECT\n                room_window_fittings.room_id AS id,\n                jsonb_agg(\n                room_window_fittings.window_in_room\n                ) windows\n            FROM room_window_fittings\n            GROUP BY id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET windows = EXCLUDED.windows;\n            RETURN NULL;\n    ", hash='7602d3988323fac7d0fe33a44a0bcd4b62679dad', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_windows_2d5dd', table='rooms_window', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='windowfittings',
            trigger=pgtrigger.compiler.Trigger(name='room_v3_window_fittings', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            INSERT INTO rooms_roomwithrelatedobjsv3(id, windows)\n            WITH room_ids AS (\n                SELECT\n                win.room_id\n                FROM rooms_window win\n                LEFT JOIN rooms_windowfittings_windows rwfw ON rwfw.window_id = win.id\n                LEFT JOIN rooms_windowfittings wf ON wf.id = rwfw.windowfittings_id\n                WHERE wf.id = OLD.id\n                ),\n            room_window_fittings AS (\n                SELECT\n                room_id,\n            json_build_object(\n            'id',\n            win.id,\n            'name',\n            win.name,\n            'width',\n            win.width,\n            'length',\n            win.length,\n            'height',\n            win.height,\n            'type',\n            win.type,\n            'fittings',\n            jsonb_agg(wf)\n            ) window_in_room\n            FROM rooms_window win\n            LEFT JOIN rooms_windowfittings_windows rwfw ON rwfw.window_id = win.id\n            LEFT JOIN rooms_windowfittings wf ON wf.id = rwfw.windowfittings_id\n            WHERE win.room_id IN (SELECT room_id FROM room_ids)\n            GROUP BY room_id, win.id\n            )\n            SELECT\n                room_window_fittings.room_id AS id,\n                jsonb_agg(\n                room_window_fittings.window_in_room\n                ) windows\n            FROM room_window_fittings\n            GROUP BY id\n            ON CONFLICT (id)\n            DO\n            UPDATE SET windows = EXCLUDED.windows;\n            RETURN NULL;\n    ", hash='46e1a5de9cebd1ec7f4d66e26a545e8589a8b7e7', operation='UPDATE OR INSERT OR DELETE', pgid='pgtrigger_room_v3_window_fittings_af150', table='rooms_windowfittings', when='AFTER')),
        ),
    ]
